//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import pkg 'connector';


#[run]
Context context: {
    #[storage]
    mystore: {
        message: 'this is a storage'
    }

    #[api]
    myapi: {
        fn hello(): str {
            return 'this is an api';
        }
    }

    #[tool]
    mytool: {
        fn do(): str {
            return 'this is a tool';
        }
    }

    #[policy]
    mypolicy: {
        #[schema((value: str): bool => value != null && value.len() > 0)]
        name: ''

        #[schema((value: str): bool => value != null && value.contains('@'))]
        email: ''

        #[schema((value: int): bool => value >= 0 && value < 120)]
        age: 0
    }
}


#[run(1)]
Connector connector: {
    context: super.context
    ran: false

    #[run]
    Connector another: {
        valid: false

        #[run]
        fn run() {
            self.out = new {
                name: 'Bob'
                email: 'bob@formata.io'
                age: 29
                hello: 'dude'
            };
            self.valid = self.applyPolicy('mypolicy', self.out, true, true);
        }
    }

    #[run]
    fn run() {
        let storage = self.storage('mystore');
        let api = self.api('myapi');
        let tool = self.tool('mytool');

        assertEq(storage.message, 'this is a storage');
        assertEq(api.hello(), 'this is an api');
        assertEq(tool.do(), 'this is a tool');

        self.ran = true;
    }
}


#[test]
fn test() {
    self.exec();
    pln(self.connector.another.out);
    assert(self.connector.another.valid);
    assert(self.connector.ran);
}

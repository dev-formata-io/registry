//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import './context';


/**
 * Connector type.
 * This is a base type for Formata connectors, providing a small context interface.
 */
type Connector {
    // Context field for this connector.
    context: Context = null;

    // Get the context for this connector.
    fn context(): Context {
        if (self.context) return self.context;
        if (super.prototype() == self.prototype()) return super.context();
        return null;
    }

    // Get an API from this connectors context.
    fn api(name: str): obj {
        let ctx = self.context();
        return if ctx ? ctx.api(name) : null;
    }

    // Get a storage from this connectors context.
    fn storage(name: str): obj {
        let ctx = self.context();
        return if ctx ? ctx.storage(name) : null;
    }

    // Get a tool from this connectors context.
    fn tool(name: str): obj {
        let ctx = self.context();
        return if ctx ? ctx.tool(name) : null;
    }
}
